{"version":3,"sources":["../../src/services/health.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Name } from '../enums/name';\n\nexport class Health {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    get(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthAntivirus>}\n     */\n    getAntivirus(): Promise<Models.HealthAntivirus> {\n\n        const apiPath = '/health/anti-virus';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite in-memory cache servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getCache(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/cache';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} params.domain - string\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthCertificate>}\n     */\n    getCertificate(params?: { domain?: string  }): Promise<Models.HealthCertificate>;\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} domain - string\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthCertificate>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getCertificate(domain?: string): Promise<Models.HealthCertificate>;\n    getCertificate(\n        paramsOrFirst?: { domain?: string } | string    \n    ): Promise<Models.HealthCertificate> {\n        let params: { domain?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { domain?: string };\n        } else {\n            params = {\n                domain: paramsOrFirst as string            \n            };\n        }\n        \n        const domain = params.domain;\n\n\n        const apiPath = '/health/certificate';\n        const payload: Payload = {};\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getDB(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/db';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getPubSub(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/pubsub';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueBuilds(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueBuilds(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueBuilds(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/builds';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueCertificates(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueCertificates(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueCertificates(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/certificates';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {string} params.name - Queue name for which to check the queue size\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueDatabases(params?: { name?: string, threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {string} name - Queue name for which to check the queue size\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueDatabases(name?: string, threshold?: number): Promise<Models.HealthQueue>;\n    getQueueDatabases(\n        paramsOrFirst?: { name?: string, threshold?: number } | string,\n        ...rest: [(number)?]    \n    ): Promise<Models.HealthQueue> {\n        let params: { name?: string, threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { name?: string, threshold?: number };\n        } else {\n            params = {\n                name: paramsOrFirst as string,\n                threshold: rest[0] as number            \n            };\n        }\n        \n        const name = params.name;\n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/databases';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueDeletes(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueDeletes(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueDeletes(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/deletes';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} params.name - The name of the queue\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getFailedJobs(params: { name: Name, threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} name - The name of the queue\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFailedJobs(name: Name, threshold?: number): Promise<Models.HealthQueue>;\n    getFailedJobs(\n        paramsOrFirst: { name: Name, threshold?: number } | Name,\n        ...rest: [(number)?]    \n    ): Promise<Models.HealthQueue> {\n        let params: { name: Name, threshold?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'name' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { name: Name, threshold?: number };\n        } else {\n            params = {\n                name: paramsOrFirst as Name,\n                threshold: rest[0] as number            \n            };\n        }\n        \n        const name = params.name;\n        const threshold = params.threshold;\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/health/queue/failed/{name}'.replace('{name}', name);\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueFunctions(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueFunctions(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueFunctions(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/functions';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueLogs(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueLogs(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueLogs(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/logs';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMails(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMails(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMails(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/mails';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMessaging(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMessaging(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMessaging(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/messaging';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMigrations(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMigrations(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMigrations(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/migrations';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite stats resources queue.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueStatsResources(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite stats resources queue.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueStatsResources(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueStatsResources(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/stats-resources';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueUsage(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueUsage(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueUsage(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/stats-usage';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueWebhooks(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueWebhooks(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueWebhooks(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/webhooks';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getStorage(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/storage';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getStorageLocal(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/storage/local';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthTime>}\n     */\n    getTime(): Promise<Models.HealthTime> {\n\n        const apiPath = '/health/time';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"]}